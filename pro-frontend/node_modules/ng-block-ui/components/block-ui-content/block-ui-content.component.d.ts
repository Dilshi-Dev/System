import { OnInit, AfterViewInit, AfterViewChecked, OnDestroy, ComponentRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { BlockUIInstanceService } from '../../services/block-ui-instance.service';
import * as ɵngcc0 from '@angular/core';
export declare class BlockUIContentComponent implements OnInit, AfterViewInit, AfterViewChecked, OnDestroy {
    private blockUI;
    private resolver;
    private changeDetectionRef;
    name: string;
    delayStart: number;
    delayStop: number;
    defaultMessage: string;
    templateCmp: any;
    templateOutlet: ViewContainerRef;
    state: any;
    className: string;
    active: boolean;
    templateCompRef: ComponentRef<{
        message?: any;
    }> | TemplateRef<{}>;
    message: any;
    private blockUISubscription;
    private settings;
    constructor(blockUI: BlockUIInstanceService, resolver: ComponentFactoryResolver, changeDetectionRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): boolean;
    ngAfterViewChecked(): void;
    private subscribeToBlockUI(blockUI$);
    private onDispatchedEvent(event);
    private onStart({name, message});
    private onStop({name});
    private onReset();
    private onUpdate({name, message});
    updateMessage(message: string): void;
    private showBlock(message);
    private hideBlock();
    private clearState();
    private updateBlockTemplate(msg);
    private onUnsubscribe(name);
    private updateInstanceBlockCount();
    private detectChanges();
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BlockUIContentComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BlockUIContentComponent, "block-ui-content", never, {
    "name": "name";
    "delayStart": "delayStart";
    "delayStop": "delayStop";
    "defaultMessage": "message";
    "templateCmp": "template";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdWktY29udGVudC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmxvY2stdWktY29udGVudC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgQ29tcG9uZW50UmVmLCBUZW1wbGF0ZVJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmxvY2tVSUluc3RhbmNlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2Jsb2NrLXVpLWluc3RhbmNlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmxvY2tVSUNvbnRlbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBibG9ja1VJO1xuICAgIHByaXZhdGUgcmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb25SZWY7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGRlbGF5U3RhcnQ6IG51bWJlcjtcbiAgICBkZWxheVN0b3A6IG51bWJlcjtcbiAgICBkZWZhdWx0TWVzc2FnZTogc3RyaW5nO1xuICAgIHRlbXBsYXRlQ21wOiBhbnk7XG4gICAgdGVtcGxhdGVPdXRsZXQ6IFZpZXdDb250YWluZXJSZWY7XG4gICAgc3RhdGU6IGFueTtcbiAgICBjbGFzc05hbWU6IHN0cmluZztcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgdGVtcGxhdGVDb21wUmVmOiBDb21wb25lbnRSZWY8e1xuICAgICAgICBtZXNzYWdlPzogYW55O1xuICAgIH0+IHwgVGVtcGxhdGVSZWY8e30+O1xuICAgIG1lc3NhZ2U6IGFueTtcbiAgICBwcml2YXRlIGJsb2NrVUlTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBzZXR0aW5ncztcbiAgICBjb25zdHJ1Y3RvcihibG9ja1VJOiBCbG9ja1VJSW5zdGFuY2VTZXJ2aWNlLCByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBjaGFuZ2VEZXRlY3Rpb25SZWY6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiBib29sZWFuO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHByaXZhdGUgc3Vic2NyaWJlVG9CbG9ja1VJKGJsb2NrVUkkKTtcbiAgICBwcml2YXRlIG9uRGlzcGF0Y2hlZEV2ZW50KGV2ZW50KTtcbiAgICBwcml2YXRlIG9uU3RhcnQoe25hbWUsIG1lc3NhZ2V9KTtcbiAgICBwcml2YXRlIG9uU3RvcCh7bmFtZX0pO1xuICAgIHByaXZhdGUgb25SZXNldCgpO1xuICAgIHByaXZhdGUgb25VcGRhdGUoe25hbWUsIG1lc3NhZ2V9KTtcbiAgICB1cGRhdGVNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzaG93QmxvY2sobWVzc2FnZSk7XG4gICAgcHJpdmF0ZSBoaWRlQmxvY2soKTtcbiAgICBwcml2YXRlIGNsZWFyU3RhdGUoKTtcbiAgICBwcml2YXRlIHVwZGF0ZUJsb2NrVGVtcGxhdGUobXNnKTtcbiAgICBwcml2YXRlIG9uVW5zdWJzY3JpYmUobmFtZSk7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbnN0YW5jZUJsb2NrQ291bnQoKTtcbiAgICBwcml2YXRlIGRldGVjdENoYW5nZXMoKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19